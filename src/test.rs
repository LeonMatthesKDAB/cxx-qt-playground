struct Qt<T> {
    qt: UniquePtr<T::FFI>,
}

impl Deref Qt<T> {
    type Target = QtRef<T, 'a>
}

struct QtRef<T, 'a> {
    rust: &'a T;
    cpp: Pin<&'a T::FFI>;
}

struct QtMut<T> {
    rust: &mut T,
    cpp: Pin<&'a mut T::FFI>;
}

// impl QObject<T> {
//     pub fn cpp(&self) -> &ffi::T;
//     pub fn cpp_mut(&mut self) -> &mut ffi::T;
// }

#[cxxqt::bridge]
mod ffi {
    extern "Qt" {
        #[qobject] // same as: #[qobject(QObject)] or: #[qobject(base = QObject)]
        struct MyObject {
            #[qproperty(qt-readonly)]
            prop: i32
        }

        // auto generated
        impl RustObj for MyObject {
            type FFI = ffi::MyObject;
        }

        // generated by CXX-Qt:
        impl MyObject {
            fn prop(self: &QObject<Self>) -> &T;

            fn set_prop(self: &QtMut<Self>, value: T);

            fn prop_mut<'a>(self: &QtMut<Self>) -> Property<T, 'a>;

            #[invokable]
            my_invokable(self: &QtMut<Self>, new_prop: i32) -> UniquePtr<ffi::MyObject> {
                self.prop();
            }

            my_invokable_wrapper(self: &mut MyObject, cpp: Pin<&ffi::MyObject>) { }

            pub fn into_qobject(self) -> Qt<Self> {
            }
        }
    }
}

fn main() {
    let mut myobj = MyObject {
        prop: 5
    };

    myobj.prop = 10;

}

